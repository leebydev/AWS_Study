# TFRecord 파일로 부터 data 복구

raw_image_dataset = tf.data.TFRecordDataset(tfrecords_path)

# Create a dictionary describing the features.
image_feature_description = {
    'image/height': tf.io.FixedLenFeature([], tf.int64),
    'image/width': tf.io.FixedLenFeature([], tf.int64),
    'image/channel': tf.io.FixedLenFeature([], tf.int64),
    'image/label': tf.io.FixedLenFeature([], tf.int64),
    'image/image_raw': tf.io.FixedLenFeature([], tf.string),
    'image/filename': tf.io.FixedLenFeature([], tf.string)
}


def _parse_image_function(example_proto):
  # Parse the input tf.train.Example proto using the dictionary above.
  return tf.io.parse_single_example(example_proto, image_feature_description)

parsed_image_dataset = raw_image_dataset.map(_parse_image_function)

k=2

for image_features in parsed_image_dataset:
    
    image_raw = image_features['image/image_raw'].numpy()  # byte array
    image_label = image_features['image/label'].numpy()  # byte array
      
    decoded = np.array(Image.open(io.BytesIO(image_raw)))  # ndarray   

    axes[k].imshow(decoded)
    axes[k].set_title('image label : {}'.format(image_label))
    k+=1
    
plt.tight_layout()
plt.show()